/*
 * mythief
 *  API for the Where is my Thief Project
 *
 * OpenAPI spec version: 0.0.6
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Device} from '../model/Device';
import {GpsPosition} from '../model/GpsPosition';

/**
* Devices service.
* @module api/DevicesApi
* @version 0.0.6
*/
export class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * add Device
     * @param {module:model/Device} device 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDeviceWithHttpInfo(device) {
      let postBody = device;

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling addDevice");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * add Device
     * @param {module:model/Device} device 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDevice(device) {
      return this.addDeviceWithHttpInfo(device)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    devicesIMEIDeleteWithHttpInfo(IMEI) {
      let postBody = null;

      // verify the required parameter 'IMEI' is set
      if (IMEI === undefined || IMEI === null) {
        throw new Error("Missing the required parameter 'IMEI' when calling devicesIMEIDelete");
      }


      let pathParams = {
        'IMEI': IMEI
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{IMEI}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    devicesIMEIDelete(IMEI) {
      return this.devicesIMEIDeleteWithHttpInfo(IMEI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get Device by ID
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Device} and HTTP response
     */
    devicesIMEIGetWithHttpInfo(IMEI) {
      let postBody = null;

      // verify the required parameter 'IMEI' is set
      if (IMEI === undefined || IMEI === null) {
        throw new Error("Missing the required parameter 'IMEI' when calling devicesIMEIGet");
      }


      let pathParams = {
        'IMEI': IMEI
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;

      return this.apiClient.callApi(
        '/devices/{IMEI}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get Device by ID
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Device}
     */
    devicesIMEIGet(IMEI) {
      return this.devicesIMEIGetWithHttpInfo(IMEI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    devicesIMEILocationsDeleteWithHttpInfo(IMEI) {
      let postBody = null;

      // verify the required parameter 'IMEI' is set
      if (IMEI === undefined || IMEI === null) {
        throw new Error("Missing the required parameter 'IMEI' when calling devicesIMEILocationsDelete");
      }


      let pathParams = {
        'IMEI': IMEI
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{IMEI}/locations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    devicesIMEILocationsDelete(IMEI) {
      return this.devicesIMEILocationsDeleteWithHttpInfo(IMEI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Locations of device
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GpsPosition>} and HTTP response
     */
    devicesIMEILocationsGetWithHttpInfo(IMEI) {
      let postBody = null;

      // verify the required parameter 'IMEI' is set
      if (IMEI === undefined || IMEI === null) {
        throw new Error("Missing the required parameter 'IMEI' when calling devicesIMEILocationsGet");
      }


      let pathParams = {
        'IMEI': IMEI
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [GpsPosition];

      return this.apiClient.callApi(
        '/devices/{IMEI}/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Locations of device
     * @param {String} IMEI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GpsPosition>}
     */
    devicesIMEILocationsGet(IMEI) {
      return this.devicesIMEILocationsGetWithHttpInfo(IMEI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * add GPS-Position to Device
     * @param {String} IMEI 
     * @param {Array.<module:model/GpsPosition>} gpsPosition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    devicesIMEILocationsPostWithHttpInfo(IMEI, gpsPosition) {
      let postBody = gpsPosition;

      // verify the required parameter 'IMEI' is set
      if (IMEI === undefined || IMEI === null) {
        throw new Error("Missing the required parameter 'IMEI' when calling devicesIMEILocationsPost");
      }

      // verify the required parameter 'gpsPosition' is set
      if (gpsPosition === undefined || gpsPosition === null) {
        throw new Error("Missing the required parameter 'gpsPosition' when calling devicesIMEILocationsPost");
      }


      let pathParams = {
        'IMEI': IMEI
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/devices/{IMEI}/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * add GPS-Position to Device
     * @param {String} IMEI 
     * @param {Array.<module:model/GpsPosition>} gpsPosition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    devicesIMEILocationsPost(IMEI, gpsPosition) {
      return this.devicesIMEILocationsPostWithHttpInfo(IMEI, gpsPosition)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
