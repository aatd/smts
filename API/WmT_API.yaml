swagger: "2.0"
info:
  version: "1.0"
  title: "Where's my Thief? - API"
  description: " API zur Webanwendung"

basePath: "/v1"
schemes:
  - "http"
tags:
  - name: "Users"
    description: "User management - Functions for Users"
  - name: "Devices"
    description: "Device management - Functions for Devices"

paths:
  /users:
    post:
      tags:
        - "Users"
      summary: "create new User"
      description: "Function to create a new user in the database. Requires Parameters: 'name', 'password', 'phonenumber'. If the registration is succesful, a 'User' element is returned"
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "user"
          schema:
            $ref: "#/definitions/User"
          required: true

      responses:
        201:
          description: User created
          schema:
            $ref: "#/definitions/User"

        409:
          description: wrong username/ password

  /users/login:
    post:
      tags:
        - "Users"
      summary: "login an existing User (!)"
      operationId: "loginUser"
      consumes:
        - "application/json"
      description: "Function to login an existing User. Checks if the User exists in the database and if the entered password is correct. Returns 'User' element (in : object User??)"
      parameters:
        - in: "body"
          name: "User"
          schema:
            $ref: "#/definitions/User"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        401:
          description: wrong username/ password

  /users/logout:
    post:
      tags:
        - "Users"
      summary: "logout user"
      description: "Function to logout User from application. "

      responses:
        200:
          description: OK

  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "get User by ID"
      operationId: "getUserbyId"
      description: "get a specific user by its unique ID. Returns the user as an 'User' element."

      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

    put:
      tags:
        - "Users"
      summary: "Update User"
      operationId: "updateUser"
      description: "Function to update user information. Updated information will be overwritten in the database. Returns the changed 'User'"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "User"
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

    delete:
      tags:
        - "Users"
      summary: "delete User"
      description: "Delete an existing User. User must be logged in, to delete its information from the database."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "ok"

  /users/{userId}/devices:
    get:
      tags:
        - "Users"
      summary: "get Devices from User"
      description: "Function to get all 'Devices' from an specific user. Returns an array of 'Devices' from the database."
      operationId: "find all Devices"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Device"

  /devices:
    post:
      tags:
        - "Devices"
      summary: "add a new device"
      description: "Function to add a new Device to the database. The logged in users information will be inserted as owner and ownerphonenumber. Requires device parameters: 'name', 'imei', 'devicePhoneNumber'."
      operationId: "addDevice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"

          required: true
          name: "device"
          schema:
            $ref: "#/definitions/Device"

      responses:
        201:
          description: "Device created"

  /devices/{imei}:
    get:
      tags:
        - "Devices"
      summary: "get Device by ID"
      description: "Function to get an specific device by its unique 'imei' as a parameter. Returns the 'Device'"
      produces:
        - "application/json"
      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Device"

    put:
      tags:
        - "Devices"
      summary: "Update Device"
      operationId: "updateDevice"
      description: "Function to update device information. Updated information will be overwritten in the database. Returns the changed 'Device'"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "Device"
          schema:
            $ref: "#/definitions/Device"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Device"

    delete:
      tags:
        - "Devices"
      summary: "delete a device"
      description: "Function to delete a single device from the database. "
      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "ok"

  /devices/{imei}/status:
    get:
      tags:
        - "Devices"
      summary: "get status of device (!)"
      description: "Function to check if the device is active??? return json status: stolen or not"
      produces:
        - "application/json"
      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "ok"

  /devices/{imei}/locations:
    post:
      tags:
        - "Devices"
      summary: "add GPS-Position to Device"
      description: "Function to add a GPSPosition element, recieved from the device, to its database GPSPosition array."

      produces:
        - "application/json"

      consumes:
        - "application/json"
        - "application/x-www-form-urlencoded"

      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "gpsPosition"
          required: true
          schema:
            $ref: "#/definitions/GPSPosition"

      responses:
        200:
          description: "Ok"

    get:
      tags:
        - "Devices"
      summary: "Get Locations of device"
      description: "Function to return all saved locations for a specific timespan from an device as a GPSPosition array. Requires start and (optional) end of desired timespan."
      parameters:
        - in: query
          name: start
          type: "string"
          description: If only start value is given, the locations from this date until now are returned. Formatted as specified in ISO 8601
        - in: query
          name: end
          type: "string"
          description: If end parameter is given, the locations in between this time frame will be returned.
        - name: "imei"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GPSPosition"

    delete:
      tags:
        - "Devices"
      summary: "delete GPSPositions of device"
      description: "delete all stored GPSPositions of a device from the Database"
      parameters:
        - name: "imei"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "ok"

definitions:
  User:
    type: "object"

    properties:
      id:
        type: "string"

      name:
        type: "string"
      password:
        type: "string"
      phoneNumber:
        type: "string"

      devices:
        type: "array"
        items:
          type: "integer"
          format: "int64"

  Device:
    type: "object"
    properties:
      name:
        type: "string"

      imei:
        type: "string"

      owner:
        type: "string"

      devicePhoneNumber:
        type: "string"

      pin:
        type: "string"

      apn:
        type: "string"

      apnUser:
        type: "string"

      apnPassword:
        type: "string"

      ownerPhoneNumber:
        type: "string"

      battery:
        type: "number"
        format: "float"

      locations:
        type: "array"
        items:
          $ref: "#/definitions/GPSPosition"

  GPSPosition:
    type: "object"
    properties:
      latitude:
        type: "number"
        format: "float"

      longitude:
        type: "number"
        format: "float"
      battery:
        type: "number"
        format: "int"
      time:
        type: "string"
        format: "date-time"
      velocity:
        type: "number"
        format: "float"
